x <- 2237
x/60
x//60
x%/%60
x%%60
h <- x%/%60
m <- x%%60
#논리 연산자
2+5?6
#논리 연산자
2+5>6
10 >5 = 5**(5-2)
10 >= 5**(5-2)
4 * 2 != 3 **5
true&false
TRUE & FALSE
(23>21) | (52<20)
4 > 3 & 4 == 4
_
_ <- 17
_
_a <- 17
.a <- 17
.a
_a <- 17
.a <- 17
.a
1name <- 12
.1name <- 12
.name <- 12
.name <- 12
if <- 12
lf <- 12
lf
&nd <- 3
ls()
is()
pi
LETTERS
letters
month
month.name
month.abb
#Functions
help(x)
?'sqrt'
c(1, 2, 3)
x<- c(1, 2, 3)
x
sqrt()
sqrt(4)
a
a = c(1, 4:8)
a
m = c('-1', '8', '-3', '6', '0')
m
sort(m)
n = c(-1, 8, -3, 6, 0)
sort(n)
help("sort")
myfunc = function(x){
circumf = pi * 2 * x
print("The circumference is:")
print(circumf)
}
function(2)
myfunc(2)
myfunc2 = function(x, y){
print(x * y)
}
myfunc(2, 10)
myfunc2 = function(x, y){
print(x * y)
}
myfunc2(2, 10)
help("sort")
sort(m, decreaseing=TRUE)
sort(m, decreaseing=FALSE)
sort(m, decreasing=FALSE)
sort(m, decreasing=TRUE)
c2f(10)
c2f <- fuction(x){
c2f <- fuction(x){
c2f <- fuction(x){
c2f <- fuction(x){
c2f = fuction(x){
c2f = fuction(x){
c2f <- function(x){
print((x * 9%/%5) + 32)
print("'F")
}
c2f(10)
c2f <- function(x){
print((x * 9%/%5) + 32)
print(F)
}
c2f(10)
is(n)
is(h)
c(1, 2:4, 'h')
is(a)
a= c(1, 2:4, 'h', 'ㅁㄴㅁㄴ')
is(a)
seq(1, 10)
seq(1, 10, by = 2)
gender
gender = c('M', 'F', 'F', 'M', 'F')
gender
gender = factor(gender)
gender
level = c('novice', 'intermediate', 'advanced')
level
factor(level)
lev = c('novice', 'intermediate', 'advanced')
lev
factor(lev)
l = factor(lev, order = T, levels = c('advanced', 'intermediate', 'novice'))
l
lev = c('novice', 'intermediate', 'advanced')
lev
factor(lev)
l = factor(lev, order = T, levels = c('advanced', 'intermediate', 'novice'))
l
c(6, 3, 8, 5, 0, 9)
nrow =3
nclo=2
m = matrix(
c(6, 3, 8, 5, 0, 9),
nrow =3,
ncol=2,
byrow=TRUE)
m
m = matrix(
c(6, 3, 8, 5, 0, 9),
nrow =3,
ncol=1,
byrow=TRUE)
m = matrix(
c(6, 3, 8, 5, 0, 9),
nrow =3,
ncol=2,
byrow=TRUE)
m
m = matrix(
c(6, 3, 8, 5, 0, 9),
nrow =3,
ncol=2,
byrow=FALSE)
m
m[3, 2]
m[1]
m = matrix(
c(6, 3, 8, 5, 0, 9),
nrow =3,
ncol=2,
byrow=FALSE)
m
m[3, 2]
m[1]
m[1,]
m
m[1,]
m[,2]
dimnames(m) = list(
c('r1', 'r2', 'r3')
)
dimnames(m) = list(
c('r1', 'r2','r3'),
c('c1', 'c2')
)
m
m1 = matrix(
c(6, 3, 8, 5, 0, 9),
nrow =3,
ncol=2,
byrow=TRUE)
rownames(m1) = c('R1', 'R2', 'R3')
m1
colnames(m1) = c('C1', 'C2', 'C3')
colnames(m1) = c('C1', 'C2')
m1
m1
phy = matrix(
c(18, 170, 62, 20, 182, 68, 36, 178, 79, 44, 165,63),
nrow = (4),
ncol = (3),
byrow = TRUE
)
phy
dimnames(phy) = list(
c('kim', 'lee', 'lim', 'jo'),
c('age', 'height', 'weight')
)
phy
mean(phy[, 'age'])
mean(phy['kim',])
mean(phy['height',])
mean(phy[ ,'height'])
mean(phy[, 'weight'])
#array()
a = array (1:24, c(2,2,6))
a
list = list(c(1, 2, 3), c("good", "bad"), list(c(4, 5, 6), c("a", "b")), pi)
list
d1 = c(1, 2, 3, 4)
d2 = c('kim', 'lee', 'kwon', 'choi')
d3 = c(20, 21, 22, 23)
d4 = data.frame(id = d1, name = d2, age = d3)
d4
d1 = c(1, 2, 3, 4)
d2 = c('kim', 'lee', 'kwon', 'choi')
d3 = c(20, 21, 22, 23)
#d4 = data.frame(id = d1, name = d2, age = d3)
d4 = data.frame(id, name, age) #요것도 가능
d1 = c(1, 2, 3, 4)
d2 = c('kim', 'lee', 'kwon', 'choi')
d3 = c(20, 21, 22, 23)
#d4 = data.frame(id = d1, name = d2, age = d3)
d4 = data.frame(d1, d2, d3) #요것도 가능
d4
a
list = list(c(1, 2, 3), c("good", "bad"), list(c(4, 5, 6), c("a", "b")), pi)
list
d1 = c(1, 2, 3, 4)
d2 = c('kim', 'lee', 'kwon', 'choi')
d3 = c(20, 21, 22, 23)
#d4 = data.frame(id = d1, name = d2, age = d3)
d4 = data.frame(d1, d2, d3) #요것도 가능
d4
4/2
4/3
4%/%3
1:10
9^(1/2)
1/2
32%%5
4*(10-4)
x <- 2237
h <- x%/%60
m <- x%%60
#논리 연산자
2+5>6
5**(5-2)
4 * 2 != 3 **5
TRUE & FALSE
(23>21) | (52<20)
4 > 3 & 4 == 4
TRUE == FALSE
_ <- 1
a_ <- 1
a_
lf
if
#내장된 변수
ls()
pi
letters#내장된 변수
month.abb
#내장된 변수
ls()
ui
z0
sqrt(4)
a = c(1, 4:8)
a
sqrt(-4)
sqrt(4)
mean(2, 6)
mean(6)
mean(x)
x<- c(1, 2, 3)
x
mean(x)
mean(1:6)
?'help'
?'print'
?"sort"
?"help"
'
#TASK: sort ‘m’ in descending numerical order
sort(m, decreasing=TRUE)
#11p
myfunc = function(x){
circumf = pi * 2 * x
print("The circumference is:")
print(circumf)
}
}
''
''
#10p
m = c('-1', '8', '-3', '6', '0')
#TASK: sort ‘m’ in descending numerical order
sort(m, decreasing=TRUE)
sort(x, decreasing = FALSE)
sort(m, decreasing = FALSE)
ff <- myfunc(x){
myfunc(2)
myfunc(x){
myfunc<- function(x){
print(x+1)
}
myfunc(2)
myfunc<- function(x){
print(x+1)
}
myfunc(2)
myfunc = function(x){
circumf = pi * 2 * x
print("The circumference is:")
print(circumf)
}
myfunc(2)
myfunc2 = function(x, y){
print(x * y)
}
myfunc2(2, 10)
discount = total_price > 10000
total_price = 15000
discount = total_price > 10000
total_price = 15000
discount = total_price > 10000
discount
is(discount)
a= c(1, 2:4, 'h', 'ㅁㄴㅁㄴ')
is(a)
seq(1, 10, by = 2)
gender = c('M', 'F', 'F', 'M', 'F')
gender
gender = factor(gender)
gender
a= c(1, 2:4, 'ㅁㄴㅁㄴ')
is(a)
gender = c('M', 'F', 'F', 'M', 'F')
gender
gender = factor(gender)
gender
gender = factor(gender)
gender
lev = c('novice', 'intermediate', 'advanced')
lev
factor(lev)
l = factor(lev, order = T, levels = c('advanced', 'intermediate', 'novice'))
l
mat = matrix(
c(1, 2, 3, 4, 5, 6),
nrow = 3,
ncol = 2,
byrow=TRUE
)
mat
phy = matrix(
c(18, 170, 62, 20, 182, 68, 36, 178, 79, 44, 165,63),
nrow = (4),
ncol = (3),
byrow = TRUE
)
phy
dimnames(phy) = list(
c('kim', 'lee', 'lim', 'jo'),
c('age', 'height', 'weight')
)
phy
#array()
c(2, 2, 6)
a = array (1:24, c(2,2,6))
a
#array()
a = array (1:24, c(2,2,6), byrow=TRUE)
a = array (1:24, c(2,2,6))
a
list = list(c(1, 2, 3), c("good", "bad"), list(c(4, 5, 6), c("a", "b")), pi)
list
d1 = c(1, 2, 3, 4)
d2 = c('kim', 'lee', 'kwon', 'choi')
d3 = c(20, 21, 22, 23)
#d4 = data.frame(id = d1, name = d2, age = d3)
d4 = data.frame(d1, d2, d3) #요것도 가능
d4
ID = c(1:10)
Gender = c('M', 'F', 'M', 'M', ,'F', 'M', 'F', 'F', 'M', 'M')
ID = c(1:10)
Gender = c('M', 'F', 'M', 'M','F', 'M', 'F', 'F', 'M', 'M')
Brand = c('Samsung', 'APPLE', 'LG', 'APPLE', 'LG', 'Samsung', 'APPLE', 'APPLE', 'Samsung', 'APPLE')
Movie = c('Horror', 'Comedy', 'Drama', 'Comedy', 'Drama', 'Comedy', 'Action', 'Action', 'Horror', 'Drama')
DF = data.frame(ID, Gender, Brand, Movie)
DF
mean(Movie)
mean(ID)
d4
mean(d3)
install.packages("installr")
library(installr)
check.for.updates.R()
print(cirucmf)
print(circumf)
myfunc = function(x){
circumf = pi * 2* x
print("The circumference is:")
print(circumf)
}
myfunc(3)
#What is the percentage of raters who gave 7.0 or higher?
#7.0이상의 점수를 매긴 평가자의 확률은 pnorm을 활용하여 다음과 같이 구한다.
perc<- (1- pnorm(7.0, mean=4.5, sd= 1.4))*100
cat(round(perc, 2), "%\n")
#Approximately, how many raters gave a score between 4 and 5?
#4와 5 사이 점수를 매긴 평가자의 확률 구하기
difference<- pnorm(5, mean=4.5, sd=1.4) - pnorm(4, mean=4.5, sd=1.4)
#전체 평가자 수에서 확률 곱하여 정답 도출
difference * 5400
#If 15% of students are qualified for merit scholarship, what is the cut-off point of GPA for scholarship?
qnorm((1-0.15), m, sd)
#40p
#주어진 통계값
m<- 3.29
sd<- 0.73
#If 15% of students are qualified for merit scholarship, what is the cut-off point of GPA for scholarship?
qnorm((1-0.15), m, sd)
round(qnorm(0.85, m, sd), 2)
#12p
library(Rling)
data("sharedref")
head(sharedref)
#실습!!해보자
ref<- aggregate(mod ~  age+cohort, data=sharedref, FUN='mean' )
ref
interaction.plot(ref$age, ref$cohort, ref$mod)
interaction.plot(ref$age, ref$cohort, ref$mod)
ref$age <- ordered(ref$age, levels = c("early", "middle", "late"))
ref$age
interaction.plot(ref$age, ref$cohort, ref$mod)
ref$age <- ordered(ref$age, levels = c("early", "middle", "late"))
ref$age
interaction.plot(ref$age, ref$cohort, ref$mod)
ref$age <- ordered(ref$age, levels = c("middle", "early", "late"))
interaction.plot(ref$age, ref$cohort, ref$mod)
#17p
#subset으로 6개 그룹 뽑고, 6개에대해 샤피로테스트하면 됨
#이거보다 간단하게 하는게 요거.
aggregate(mod ~ age + cohort, data=sharedref, function(x) shapiro.test(x)$p.value)
#18p 등분산성
fligner.test(mod ~ interaction(age, cohort), data=sharedref)
#17~20p 실습 시간
aggregate(mod~ age+cohort, data=sharedref,function(x) shapiro.test(x)$p.value)
fligner.test(mod ~ interaction(age, cohort), data=sharedref)
sharedref.aov = aov(mod~age*cohort, data=sharedref)
summary(shoaredref.aov)
summary(sharedref.aov)
#p값이 ㅁ애우 낮게 나옴.
sharedref.aov = aov(mod ~ age*cohort, data=sharedref)
sharedref
TukeyHSD(sharedref.aov, "age")
#24p
library (Rling)
data(time_exper)
#24p
library (Rling)
data(time_exper)
head(time_exper)
eng = subset(time_exper, Lang == 'EN')
boxplot(rt~Prime, data=eng)
md.aov = aov(rt ~ Prime + Error(Subj/Prime), data=eng)
summary(md.aov)
install.packages("httr") # HTTP통신을 위한 패키지 설치
library(httr)
GET('http://apis.data.go.kr/1390802/SoilEnviron/SoilExam/getSoilExam?serviceKey=서비스키&PNU_Code=4215034022100620003')
url = "http://apis.data.go.kr/1390802/SoilEnviron/SoilExam"
url = "http://apis.data.go.kr/1390802/SoilEnviron/SoilExam"
auth_key = "C9isPJO3CKoK7UK894DKnDD1mvMwmXq0DcJAdqOac13fXCyVNoweotfGxW2qGKhRYeGAfu8wCTYDpgEADGjAxA%3D%3D"
# sample 제거
type = 'xml'
service = 'ListPublicReservationCulture'
startindex = '1'
endindex = '50'
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
library(XML)
install.packages("XML")
library(XML)
parsedXml <-xmlParse(api_url)
api_url = paste(url, auth_key, type, service, startindex, endindex, sep = '/')
parsedXml <-xmlParse(api_url)
setwd("~/Desktop/부트캠프_파이썬 _실습/Python_Practice/토양데이터합치기/토양데이터_군위")
file = "gunwi1.xls"
gunwi1<- read_excel(file)
library(readxl)
file = "gunwi1.xls"
gunwi1<- read_excel(file)
install.packages("gdata")
library(gdata)
gunwi1 <- read.xls("gunwi1.xls")
install.packages("libxls")
library(readxl)
file = "gunwi1.xls"
gunwi1<- read_excel(file)
library("libxls")
library(libxls)
library(readxl)
file = "gunwi1.xls"
gunwi1<- read_excel(file)
file = "gunwi1.xlsx"
gunwi1<- read_excel(file)
library(openxlsx)
gunwi1 <- read.xlsx(file_path)
gunwi1 <- read.xlsx(file)
file = "1gunwi.xlsx"
gunwi1<- read_excel(file)
View(gunwi1)
phlist<- gunwi1[33]
phlist<- gunwi1[33,]
phlist
